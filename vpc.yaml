AWSTemplateFormatVersion: "2010-09-09"
Description: A common setup for a standard VPC, with 1 public subnet and 1 private subnet. https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html

Parameters:
  ParamVpcName:
    Type: String
    Description: The name of this VPC
  ParamVpcCidrBlock:
    Type: String
    Description: The CidrBlock for this VPC
    Default: "10.0.0.0/16"
  ParamPublicSubnetCidrBlock:
    Type: String
    Description: The CidrBlock for the Public Subnet
    Default: "10.0.1.0/24"
  ParamPrivateSubnetCidrBlock:
    Type: String
    Description: The CidrBlock for the Private Subnet
    Default: "10.0.2.0/24"
  ParamAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a
  ParamOwner:
    Type: String

Resources:
  StandardVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ParamVpcCidrBlock
      Tags:
        -
          Key: Name
          Value: !Ref ParamVpcName
        - 
          Key: Owner
          Value: !Ref ParamOwner

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayVPCAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref StandardVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ParamPublicSubnetCidrBlock
      AvailabilityZone: !Ref ParamAvailabilityZone
      VpcId: !Ref StandardVPC
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StandardVPC
  PublicRouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet
  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [ EIP, AllocationId ]
      SubnetId: !Ref PublicSubnet
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ParamPrivateSubnetCidrBlock
      AvailabilityZone: !Ref ParamAvailabilityZone
      VpcId: !Ref StandardVPC
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StandardVPC
  PrivateRouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet
  RouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: "0.0.0.0/0"
  # Blocking outside access to the Private instances through custom Network ACL
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref StandardVPC
  # Allow internal traffic from within the VPC into the Private Subnet
  PrivateNetworkAclInboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref ParamVpcCidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      PortRange:
        From: 22
        To: 22
  PrivateNetworkAclInboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref ParamVpcCidrBlock
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 200
      Protocol: -1
      RuleAction: allow
      PortRange:
        From: 80
        To: 80
  PrivateNetworkAclInboundRule3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 3000
      Protocol: -1
      RuleAction: deny
  # Allow outbound traffic, this will hit the NAT Gateway because of the Route table rule
  PrivateNetworkAclOutboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
  
Outputs:
  StandardVpcId:
    Description: The Id of this Standard VPC that is created by this stack
    Value: !Ref StandardVPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
